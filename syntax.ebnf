program = { declaration }, ?EOF?;

declaration = class-declaration | function-declaration | variable-declaration | statement;
class-declaration = "class", identifier, "{", { function-declaration }, "}";
function-declaration = "fn", identifier, "(", [ parameters ], ")", block;
parameters = identifier, { ",", identifier };
variable-declaration = "let", identifier, [ "=", expression ];

statement = ( expression | block | if-statement | while-statement | return-statement ), "\n";
return-statement = "return", [ expression ];
while-statement = "while", "(", expression, ")", statement;
if-statement = "if", "(", expression, ")", statement, [ "else", statement ];
block = "{", declaration, "}";

expression = assignment;

assignment = identifier, "=", assignment | logic-or;
logic-or = logic-and, { "or", logic-and };
logic-and = equality, { "and", equality };
equality = comparison, { ( "not" | "is" ), comparison };
comparison = term, { ( ">" | ">=" | "<" | "<=" ), term };
term = factor, { ( "-" | "+" ), factor };
factor = unary, { ( "/" | "*" ), unary };
unary = ( "!" | "-" ), unary | call;
call = primary, { "(", { arguments }, ")" };
arguments = expression, { ",", expression };
primary = number | string | "true" | "false" | "none" | "(", expression, ")";

letter = "a".."z" | "A".."Z";
digit = "0".."9";
character = letter | digit;

identifier = ( character | "_" ), { ( character | "_" ) };

number = digit, { digit };
string = '"', letter, { letter }, '"';

operator
    = "is"
    | "not"
    | "<"
    | "<="
    | ">"
    | ">="
    | "+"
    | "-"
    | "*"
    | "/";

comment = "?", { character | "_" };