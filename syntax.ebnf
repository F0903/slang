operator
    = "is"
    | "not"
    | "<"
    | "<="
    | ">"
    | ">="
    | "+"
    | "-"
    | "*"
    | "/";

letter = "a".."z" | "A".."Z";
digit = "0".."9";
character = letter | digit;

identifier = ( character | "_" ), { ( character | "_" ) };

number = digit, { digit };
string = '"', letter, { letter }, '"';

comment = "?", { character | "_" };

primary = number | string | "true" | "false" | "none" | "(", expression, ")";
equality = comparison, { ( "not" | "is" ), comparison };
term = factor, { ( "-" | "+" ), factor };
unary = ( "!" | "-" ), unary | call;
comparison = term, { ( ">" | ">=" | "<" | "<=" ), term };
factor = unary, { ( "/" | "*" ), unary };
arguments = expression, { ",", expression };
call = primary, { ( "(", { arguments }, ")" ) | ( ".", identifier ) };
logic-and = equality, { "and", equality };
logic-or = logic-and, { "or", logic-and };
assignment = [ call, "." ], identifier, "=", assignment | logic-or;

expression = assignment;

variable-declaration = "let", identifier, [ "=", expression ];
parameters = identifier, { ",", identifier };
function-declaration = "fn", identifier, "(", [ parameters ], ")", block;
class-declaration = "class", identifier, "{", { function-declaration }, "}";
declaration = class-declaration | function-declaration | variable-declaration | statement;

block = "{", declaration, "}";
if-statement = "if", expression, "{", statement, "}", [ "else", "{", statement, "}" ];
while-statement = "while", expression, "{", statement, "}";
for-statement = "for", variable-declaration, ",", expression, ",", expression, "{", statement;
return-statement = "return", [ expression ];
statement = ( expression | block | if-statement | while-statement | return-statement ), "\n";

program = { declaration }, ?EOF?;